grammar org.sdu.dsl4ifc.SustainLang with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate sustainLang "http://www.sdu.org/dsl4ifc/SustainLang"

Model:
    statements+=Statement*;

Statement:
    {Statement} source=SourceCommand filters+=FilterCommand* do=DoCommand? transforms=TranformationCommand? outputs+=OutputCommand+ ';'?;

SourceCommand:
    'SOURCE' path=STRING;

OutputCommand:
	'OUTPUT' TableOutput
;

TableOutput returns OutputCommand:
	'TABLE' reference=[Reference] 'COLUMNS' '[' columns+=ID? (',' columns+=ID)* ']'
;

/*
FromCommand:
    'FROM' types+=IfcTypeRef (',' types+=IfcTypeRef)*;
    */
    
enum IfcType:
	ifcWall='IfcWall' 						| 
	ifcDoor='IfcDoor' 						| 
	ifcRoot='IfcRoot' 						| 
	ifcMaterial='IfcMaterial' 				| 
	ifcBuildingElement='IfcBuildingElement' | 
	ifcSlab='IfcSlab'
;

FilterCommand:
    'GET' type=IfcTypeRef ('WHERE' condition=BooleanExpression)?;

DoCommand:
    {DoCommand} 'DO' calculation+=Calculation*;

TranformationCommand:
    'GROUP' 'BY' attribute=Attribute;	// Add more

IfcTypeRef returns Reference:
	ifcType=IfcType name=ID?
;

Calculation returns Calculation:
	LcaCalculation
;

LcaCalculation returns Calculation:
    {LcaCalculation} 'LCA' '('lcaParams=LcaParams 'MATERIAL' 'MAPPING' '(' matDefs+=MatDef* ')' ')' summaryReference=LcaSummaryReference (',' lcaEntitiesReference=LcaEntitiesReference)?;


MatDef:
	ifcMat=STRING '->' epdMatId=STRING
;

LcaParams:
	'SOURCE' sourceVar=[Reference] & 'AREA' area=Double & 'HEATEDAREA' areaHeat=Double & 'B6' b6=Double
;

Double returns ecore::EDouble:
    '-'? INT ('.' INT)?;
	
LcaSummaryReference returns Reference:
    {LcaSummaryReference} name=ID;
    
LcaEntitiesReference returns Reference:
    {LcaEntitiesReference} name=ID;

Attribute:
    reference=[Reference]'.'attribute=ID
;

enum BooleanOperator:
	AND='AND' | OR='OR'
;

enum ComparisonOperator:
    equals='=' | different='<>' | smallerThan='<' | largerThan='>' | smallerOrEqualThan='<=' | largerOrEqualThan='>='
;

BooleanExpression returns Expression:
    ComparisonExpression ({BooleanExpression.left=current} operator=BooleanOperator right=BooleanExpression)*;
    
ComparisonExpression returns Expression:
    Atom ({ComparisonExpression.left=current} operator=ComparisonOperator right=Atom)*;
    
Atom returns Expression:
	Attribute | ({Value} stringValue=STRING | intValue=INT)
;
    
    