grammar org.sdu.dsl4ifc.SustainLang with org.eclipse.xtext.common.Terminals

generate sustainLang "http://www.sdu.org/dsl4ifc/SustainLang"

Model:
    statements+=Statement*;

Statement:
    {Statement} source=SourceCommand select=SelectCommand from=FromCommand? filters+=FilterCommand* do=DoCommand? transforms=TranformationCommand? ';'?;

SourceCommand:
    'SOURCE' 'MODEL' name=ID path=STRING;

SelectCommand:
	{SelectCommand} 'SELECT' selects+=Attribute? (',' selects+=Attribute)*
;

FromCommand:
    'FROM' types+=IfcTypeRef (',' types+=IfcTypeRef)*;
    
enum IfcType:
	ifcWall='IfcWall' | ifcDoor='IfcDoor' | ifcRoot='IfcRoot'
;

FilterCommand:
    'FILTER' reference=[Reference] 'WHERE' condition=BooleanExpression;

DoCommand:
    {DoCommand} 'DO' calculation+=Calculation*;

TranformationCommand:
    'GROUP' 'BY' attribute=Attribute;	// Add more

IfcTypeRef returns Reference:
    ifcType=IfcType name=ID?;

Calculation returns Calculation:
	LcaCalculation
;
/* 
LcaCalculation returns Calculation:
    {LcaCalculation} 'LCA' '(' (options+=ID (',' options+=ID)*)? ')' reference=CalcReference;
*/
LcaCalculation returns Calculation:
    {LcaCalculation} 'LCA' '('lcaParams=LcaParams 'MATDEF' '(' matDefs+=MatDef* ')' ')' reference=CalcReference;

//sourceVar=[Reference]',' quantPath=ID

MatDef:
	ifcMat=STRING '->' edpMatId=STRING
;

LcaParams:
	'SOURCE' sourceVar=[Reference] & 'AREA' area=INT & 'AREAHEAT' areaHeat=INT & 'B6' b6=INT
;

CalcReference returns Reference:
    {CalcReference} name=ID;

Attribute:
    reference=[Reference]'.'attribute=ID
;

enum BooleanOperator:
	AND='AND' | OR='OR'
;

enum ComparisonOperator:
    equals='=' | different='<>' | smallerThan='<' | largerThan='>' | smallerOrEqualThan='<=' | largerOrEqualThan='>='
;

BooleanExpression returns Expression:
    ComparisonExpression ({BooleanExpression.left=current} operator=BooleanOperator right=BooleanExpression)*;
    
ComparisonExpression returns Expression:
    Atom ({ComparisonExpression.left=current} operator=ComparisonOperator right=Atom)*;
    
Atom returns Expression:
	Attribute | ({Value} stringValue=STRING | intValue=INT)
;
    
    