grammar org.sdu.dsl4ifc.SustainLang with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate sustainLang "http://www.sdu.org/dsl4ifc/SustainLang"

Model:
    statements+=Statement*;

Statement:
    {Statement} source=SourceCommand filters+=FilterCommand* do=DoCommand? (transforms+=TransformationCommand)* outputs+=OutputCommand+ ';'?;

SourceCommand:
    'SOURCE' path=STRING;

OutputCommand:
	'OUTPUT' (TableOutput | TraceOutput)
;

TableOutput returns OutputCommand:
	{TableOutput} 'TABLE' reference=[Reference] 'COLUMNS' '[' columns+=OutputArgument? (',' columns+=OutputArgument)* ']'
;

TraceOutput returns OutputCommand:
	{TraceOutput} 'TRACE' 'REPORT' outputPath=STRING
;

OutputArgument:
	Field | Function
;

Function:
	functionType=AggregateFunction'(' field=Field ')'
;

Field:
	fieldName=ID
;

enum AggregateFunction:
	sum='SUM'  |
	average='AVG' |
	minimum='MIN' |
	maximum='MAX' |
	count='COUNT'
;
    
enum IfcType:
	ifcWall='IfcWall' 						| 
	ifcBeam='IfcBeam' 						|
	ifcDoor='IfcDoor' 						| 
	ifcRoot='IfcRoot' 						| 
	ifcMaterial='IfcMaterial' 				| 
	ifcBuildingElement='IfcBuildingElement' | 
	ifcSlab='IfcSlab'						|
	ifcBuilding='IfcBuilding'
;

FilterCommand:
    'GET' type=IfcTypeRef ('WHERE' condition=BooleanExpression)?;

DoCommand:
    {DoCommand} 'CALCULATE' calculation+=Calculation*;

TransformationCommand:
    'GROUP' reference=[Reference] 'BY' attributes+=Field (',' attributes+=Field)*;

IfcTypeRef returns Reference:
	ifcType=IfcType name=ID?
;

Calculation returns Calculation:
	LcaCalculation
;

LcaCalculation returns Calculation:
    {LcaCalculation} 'LCA' 
    '(' summaryReference=LcaSummaryReference '<-' 'SUMMARY' 
    ( ','lcaEntitiesReference=LcaEntitiesReference '<-' 'ELEMENTS' )? ')'
    'FOR' source=[Reference] 
    '('lcaParams=LcaParams 'MATERIAL' 'MAPPING' '(' matDefs+=MatDef* ')' ')';


MatDef:
	ifcMat=STRING '->' epdMatId=STRING
;

LcaParams:
	'AREA' area=AreaSource & 'HEATEDAREA' areaHeat=Double & 'B6' b6=Double & 'EPD' epd=EPD
;

enum EPD:
	br18='BR18' | eco='EcoPlatform'
;

AreaSource returns AreaSource:
	{AreaValue} area=Double | {AreaAuto} 'AUTO'
;

Double returns ecore::EDouble:
    '-'? INT ('.' INT)?;
	
LcaSummaryReference returns Reference:
    {LcaSummaryReference} name=ID;
    
LcaEntitiesReference returns Reference:
    {LcaEntitiesReference} name=ID;

Attribute:
    reference=[Reference]'.'field=Field
;

enum BooleanOperator:
	AND='AND' | OR='OR'
;

enum ComparisonOperator:
    equals='=' | different='<>' | smallerThan='<' | largerThan='>' | smallerOrEqualThan='<=' | largerOrEqualThan='>='
;

BooleanExpression returns Expression:
    ComparisonExpression ({BooleanExpression.left=current} operator=BooleanOperator right=BooleanExpression)*;
    
ComparisonExpression returns Expression:
    Atom ({ComparisonExpression.left=current} operator=ComparisonOperator right=Atom)*;
    
Atom returns Expression:
	Attribute | ({Value} stringValue=STRING | intValue=INT)
;
    
    