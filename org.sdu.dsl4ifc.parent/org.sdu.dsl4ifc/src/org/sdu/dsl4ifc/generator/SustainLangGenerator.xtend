/*
 * generated by Xtext 2.30.0
 */
package org.sdu.dsl4ifc.generator

import com.apstex.ifc2x3toolbox.ifc2x3.IfcWall
import com.apstex.ifc2x3toolbox.ifcmodel.IfcModel
import java.io.File
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.ui.console.ConsolePlugin
import org.eclipse.ui.console.MessageConsole
import org.eclipse.ui.console.MessageConsoleStream
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.sdu.dsl4ifc.sustainLang.SourceCommand

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SustainLangGenerator extends AbstractGenerator {
	
	MessageConsoleStream out = null;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		val myConsole = findConsole("SusLang");
		out = myConsole.newMessageStream();
		out.println("Hello from Generic console sample action");
		
		val ifcModel = new IfcModel();
		
		val sourceCommands = resource.allContents.filter(SourceCommand);
		
		val sourceCommand = sourceCommands.head
		val file = new File(sourceCommand.path);
		ifcModel.readStepFile(file)
		
		val walls = ifcModel.getCollection(IfcWall)
		
		walls.forEach[wall, index | out.println(wall.name.decodedValue) ]
	}
	
	def MessageConsole findConsole(String name) {
	    val plugin = ConsolePlugin.getDefault()
	    val conMan = plugin.getConsoleManager()
	    val existing = conMan.getConsoles()
	    for (console : existing) {
	        if (name.equals(console.getName())) {
	            return console as MessageConsole
	        }
	    }
	    // no console found, so create a new one
	    val myConsole = new MessageConsole(name, null)
	    val consoles = #[myConsole];
	    conMan.addConsoles(consoles);
	    return myConsole;
	}
}
